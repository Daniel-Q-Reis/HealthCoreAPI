name: Django CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Test, Lint & Scan
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.12"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Set up environment variables
      run: |
        echo "PYTHONPATH=src" >> $GITHUB_ENV
        echo "TESTING=True" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CACHE_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=a-secret-key-for-testing-purposes-only" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV

    - name: Check for Missing Migrations
      run: python manage.py makemigrations --check --dry-run --verbosity 2

    - name: Validate Requirements Files
      run: |
        echo "🔍 Checking requirements files..."

        # Check if requirements files exist
        [ -f requirements.in ] && echo "✅ requirements.in exists" || { echo "❌ requirements.in missing"; exit 1; }
        [ -f requirements-dev.in ] && echo "✅ requirements-dev.in exists" || { echo "❌ requirements-dev.in missing"; exit 1; }
        [ -f requirements.txt ] && echo "✅ requirements.txt exists" || { echo "❌ requirements.txt missing"; exit 1; }
        [ -f requirements-dev.txt ] && echo "✅ requirements-dev.txt exists" || { echo "❌ requirements-dev.txt missing"; exit 1; }

        # Check if .txt files are newer than .in files
        if [ requirements.txt -ot requirements.in ]; then
          echo "❌ requirements.txt is older than requirements.in - run pip-compile"
          exit 1
        fi

        if [ requirements-dev.txt -ot requirements-dev.in ]; then
          echo "❌ requirements-dev.txt is older than requirements-dev.in - run pip-compile"
          exit 1
        fi

        echo "✅ All requirements files are up to date"

    - name: Run Ruff Linter
      run: ruff check .

    - name: Run Mypy
      run: mypy .

    - name: Security Scan
      continue-on-error: true
      run: |
        bandit -c pyproject.toml -r .
        safety check --full-report

    - name: Run Pytest
      run: pytest

  test-docker-build:
    name: Test Docker Build
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Convert repository name to lowercase
        id: repo
        run: echo "repository=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: "ghcr.io/${{ steps.repo.outputs.repository }}:pr-${{ github.event.number }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-docker-image:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Convert repository name to lowercase
        id: repo
        run: echo "repository=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: "ghcr.io/${{ steps.repo.outputs.repository }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
